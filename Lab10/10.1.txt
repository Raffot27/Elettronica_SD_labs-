#include <hidef.h>      /* common defines and macros */
#include "derivative.h" /* derivative-specific definitions */

//definizione degli intervalli
#define delta_1 3125 // se T> 3125 --> f< 1 KHz
#define delta_2 1563 // se 1563<T<3125 ---> 1KHz < f < 2 KHz 
#define delta_3 781  // se 1563<T<781 --> 2KHz < f < 4KHz
                     // se T<781 --> f>4KHz

//definizione dei LED
#define LED1 PTT_PTT4
#define LED2 PTT_PTT5
#define LED3 PTT_PTT6
#define LED4 PTT_PTT7

 

#define segnale_input PTT_PTT0  //collegato al pin A34
#define prescaler TSCR2_PR
#define modalita_segnale TIOS_IOS0
#define interr_enable TIE_C0I  //arm interrupt

#define contatore TC0 //variabile dove viene salvato l'istante in cui si è verificato l'evento



#define flag_evento TFLG1_C0F  //flag associato all'evento


int dc, periodo, cnt, edge, ampiezza;

 void main(void)  
 {   
     
     cnt=0; 
     DDRT = 0xF0; // abilito i LED come output !!!!!!!!!!!!!!!!!!!!!!
      
     TSCR1= 0x90; //abiliatiamo il TCNT e il fast flag clear--> che si attiva ogni volta che cambiano reg_comp(TC0) oppure il flag(C0F)
     prescaler = 1; // -->Fclk = 3.125MHz
     
      //wait PLL lock
    while (!CPMUFLG_LOCK); //serve per aspettare che il PLL sia stabile 
     
     modalita_segnale = 0; // inposto la porta come input capture; in realtà al reset sarebbe già a 0
     interr_enable = 1;
     TCTL4 = 0x03; //imposto che l'evento si verifica su ogni fronte di clock
     
     
     
     //Spengo tutti i LED
     LED1 = 1;
     LED2 = 1;
     LED3 = 1;
     LED4 = 1; 
     
   
 
  EnableInterrupts; 
 


 for(;;)
   { 
     
      
      
               
      _FEED_COP(); /* feeds the dog */ 
    } /* loop forever */ 
  }
  
  
  
  
    
  
  
  #pragma CODE_SEG NON_BANKED
  
 interrupt 8 void misurazione(void) 
 {
    contatore = TCNT;
    
       
   
    
    
    if(cnt == 2) 
    {
      periodo = contatore - edge;
      if(edge > contatore) 
      {
        periodo = 0xFFFF-edge+contatore;
      }
      
      cnt++;
      
      dc = (ampiezza*100)/ periodo;
      
      //condizioni sul duty cycle
      if( dc<25) 
      {
        LED4=0;
        LED3=0;
      } 
      
      else if( dc >= 25  &&  dc<50) 
      {
        LED4=0;
        LED3=1;
      }
      
        else if( dc >= 50  &&  dc<75) 
      {
        LED4=1;
        LED3=0;
      }
      
        else //( dc >= 75) 
      {
        LED4=1;
        LED3=1;
      }
      
      
      //condizioni sul periodo
       if( periodo > delta_1) 
      {
        LED2=1;
        LED1=1;
      }
      
      else if( periodo > delta_2 && periodo <= delta_1) 
      {
        LED2=1;
        LED1=0;
      } 
      
      else if( periodo > delta_3 && periodo <= delta_2) 
      {
        LED2=0;
        LED1=1;
      } 
  
        else //( dc >= 75) 
      {
        LED2=0;
        LED1=0;
      }       
    
    }
    
    
     if(cnt == 1) 
    {
      ampiezza = contatore - edge;
      
      if(edge > ampiezza) 
      {
        ampiezza = 0xFFFF-edge+contatore;
      }
      cnt++;
    
    }
    
    
    if(cnt == 0 && segnale_input) 
    {
       edge = contatore;
       cnt++;
    
    }
    
    if(cnt==3) 
    {
      cnt = 0;
    }
    
    
 }
  
   #pragma CODE_SEG DEFAULT 